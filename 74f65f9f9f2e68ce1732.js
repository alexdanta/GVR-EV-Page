import"./style.css";import*as THREE from"three";import{OrbitControls}from"three/examples/jsm/controls/OrbitControls.js";import{GLTFLoader}from"three/examples/jsm/loaders/GLTFLoader.js";import{Raycaster}from"three";const debugObject={};let sceneReady=!1;const loadingBarElement=document.querySelector(".loading-bar"),loadingManager=new THREE.LoadingManager((()=>{window.setTimeout((()=>{const e=document.getElementById("loading-screen");e.classList.add("fade-out"),e.addEventListener("transitionend",onTransitionEnd),loadingBarElement.classList.add("ended"),loadingBarElement.style.transform=""}),500),window.setTimeout((()=>{sceneReady=!0}),2e3)}),((e,t,n)=>{const a=t/n;loadingBarElement.style.transform=`scaleX(${a})`})),gltfLoader=new GLTFLoader(loadingManager),cubeTextureLoader=new THREE.CubeTextureLoader(loadingManager),textureLoader=new THREE.TextureLoader,floorAlpha=textureLoader.load("/textures/CircularAlpha.jpg"),canvas=document.querySelector("canvas.webgl"),scene=new THREE.Scene,updateAllMaterials=()=>{scene.traverse((e=>{e instanceof THREE.Mesh&&e.material instanceof THREE.MeshStandardMaterial&&(e.material.envMap=environmentMap,e.material.envMapIntensity=debugObject.envMapIntensity,e.material.needsUpdate=!0,e.castShadow=!0,e.receiveShadow=!0)}))},FloorMaterial=new THREE.MeshStandardMaterial;FloorMaterial.opacity=.5,FloorMaterial.transparent=!0,FloorMaterial.alphaMap=floorAlpha;const Floor=new THREE.Mesh(new THREE.PlaneBufferGeometry(10,10),FloorMaterial);Floor.rotation.x=.5*-Math.PI,Floor.position.y=-2.001,scene.add(Floor);const environmentMap=cubeTextureLoader.load(["/textures/environmentMaps/0/px.jpg","/textures/environmentMaps/0/nx.jpg","/textures/environmentMaps/0/py.jpg","/textures/environmentMaps/0/ny.jpg","/textures/environmentMaps/0/pz.jpg","/textures/environmentMaps/0/nz.jpg"]);environmentMap.encoding=THREE.sRGBEncoding,scene.environment=environmentMap,debugObject.envMapIntensity=5,gltfLoader.load("/models/RTMEV/EVCharger_RTMEVChargerEXP.gltf",(e=>{e.scene.scale.set(2.5,2.5,2.5),e.scene.position.set(0,-2,0),e.scene.rotation.y=-1*Math.PI,scene.add(e.scene),scene.traverse((e=>{e instanceof THREE.Mesh&&e.material instanceof THREE.MeshStandardMaterial&&(e.material.envMap=environmentMap,e.material.envMapIntensity=debugObject.envMapIntensity,e.material.needsUpdate=!0,e.castShadow=!0,e.receiveShadow=!0)}))}));const raycaster=new Raycaster,points=[{position:new THREE.Vector3(.45,1,-.65),element:document.querySelector(" .point-0")},{position:new THREE.Vector3(-.5,.75,-.75),element:document.querySelector(" .point-1")},{position:new THREE.Vector3(0,2,-.65),element:document.querySelector(" .point-2")}],directionalLight=new THREE.DirectionalLight("#ffffff",4);directionalLight.castShadow=!0,directionalLight.shadow.camera.far=10,directionalLight.shadow.mapSize.set(2048,2048),directionalLight.shadow.normalBias=.05,directionalLight.position.set(2.14,4.52,1.6),scene.add(directionalLight);const sizes={width:window.innerWidth,height:window.innerHeight};window.addEventListener("resize",(()=>{sizes.width=window.innerWidth,sizes.height=window.innerHeight,camera.aspect=sizes.width/sizes.height,camera.updateProjectionMatrix(),renderer.setSize(sizes.width,sizes.height),renderer.setPixelRatio(Math.min(window.devicePixelRatio,2))}));const mouse=new THREE.Vector2;window.addEventListener("mousemove",(e=>{mouse.x=e.clientX/sizes.width*2-1,mouse.y=-(e.clientY/sizes.height*2-1)})),window.addEventListener("click",(()=>{currentIntersect&&console.log("click on a sphere")}));const camera=new THREE.PerspectiveCamera(75,sizes.width/sizes.height,.1,100);camera.position.set(-2.5,1.5,-5.5),scene.add(camera);const controls=new OrbitControls(camera,canvas);controls.enableDamping=!0,controls.maxPolarAngle=.49*Math.PI,controls.panSpeed=0,controls.zoomSpeed=0;const renderer=new THREE.WebGLRenderer({canvas,antialias:!0,alpha:!0});function onTransitionEnd(e){e.target.remove()}renderer.physicallyCorrectLights=!0,renderer.outputEncoding=THREE.sRGBEncoding,renderer.toneMapping=THREE.ACESFilmicToneMapping,renderer.toneMappingExposure=1.5,renderer.shadowMap.enabled=!0,renderer.shadowMap.type=THREE.PCFSoftShadowMap,renderer.setSize(sizes.width,sizes.height),renderer.setPixelRatio(Math.min(window.devicePixelRatio,2));const tick=()=>{if(controls.update(),sceneReady)for(const e of points){const t=e.position.clone();t.project(camera),raycaster.setFromCamera(t,camera);const n=raycaster.intersectObjects(scene.children,!0);0===n.length?e.element.classList.add("visible"):n[0].distance<e.position.distanceTo(camera.position)?e.element.classList.remove("visible"):e.element.classList.add("visible");const a=t.x*sizes.width*.5,r=-t.y*sizes.height*.5;e.element.style.transform=`translate(${a}px, ${r}px)`}renderer.render(scene,camera),window.requestAnimationFrame(tick)};tick();